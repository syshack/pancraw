package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
	"github.com/gocolly/colly/v2"
	"github.com/gocolly/colly/v2/queue"
	"github.com/piaohao/godis"
)

var api_url = "https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous"

type AutoGenerated struct {
	Links struct {
		First string `json:"first"`
		Prev  string `json:"prev"`
		Next  string `json:"next"`
	} `json:"links"`
	Data []struct {
		Type       string `json:"type"`
		ID         string `json:"id"`
		Attributes struct {
			Title            string      `json:"title"`
			Slug             string      `json:"slug"`
			CommentCount     int         `json:"commentCount"`
			ParticipantCount int         `json:"participantCount"`
			CreatedAt        time.Time   `json:"createdAt"`
			LastPostedAt     time.Time   `json:"lastPostedAt"`
			LastPostNumber   int         `json:"lastPostNumber"`
			CanReply         bool        `json:"canReply"`
			CanRename        bool        `json:"canRename"`
			CanDelete        bool        `json:"canDelete"`
			CanHide          bool        `json:"canHide"`
			IsApproved       bool        `json:"isApproved"`
			Subscription     interface{} `json:"subscription"`
			CanTag           bool        `json:"canTag"`
			IsSticky         bool        `json:"isSticky"`
			CanSticky        bool        `json:"canSticky"`
			IsLocked         bool        `json:"isLocked"`
			CanLock          bool        `json:"canLock"`
		} `json:"attributes"`
		Relationships struct {
			User struct {
				Data struct {
					Type string `json:"type"`
					ID   string `json:"id"`
				} `json:"data"`
			} `json:"user"`
			LastPostedUser struct {
				Data struct {
					Type string `json:"type"`
					ID   string `json:"id"`
				} `json:"data"`
			} `json:"lastPostedUser"`
			Tags struct {
				Data []struct {
					Type string `json:"type"`
					ID   string `json:"id"`
				} `json:"data"`
			} `json:"tags"`
			FirstPost struct {
				Data struct {
					Type string `json:"type"`
					ID   string `json:"id"`
				} `json:"data"`
			} `json:"firstPost"`
		} `json:"relationships"`
	} `json:"data"`
	Included []struct {
		Type       string `json:"type"`
		ID         string `json:"id"`
		Attributes struct {
			Number      int       `json:"number"`
			CreatedAt   time.Time `json:"createdAt"`
			ContentType string    `json:"contentType"`
			ContentHTML string    `json:"contentHtml"`
		} `json:"attributes,omitempty"`
	} `json:"included"`
}

// type Ali struct {
// 	Expiration string `json:"expiration"`
// 	ShareName  string `json:"share_name"`
// }

type Record struct {
	Expiration   string `json:"expiration"`
	ShareName    string `json:"share_name"`
	Url          string `json:"url"`
	Title        string `json:"title"`
	Tag          string `json:"tag"`
	ShareContent string `json:"share_content"`
}

type ReqJson struct {
	Share_id string `json:"share_id"`
}

func findAlishare(content string) []string {
	// fmt.Println(content)
	urlList := []string{}
	doc, _ := goquery.NewDocumentFromReader(bytes.NewReader([]byte(content)))
	doc.Find("a").Each(func(i int, s *goquery.Selection) {
		url, exists := s.Attr("href")
		if !exists {
			return
		}
		// fmt.Println(url)
		urlList = append(urlList, url)
	})

	return urlList
}

func getShareinfo(share_url string) (*Record, error) {
	response := &Record{}
	record := &Record{}

	s := strings.Split(share_url, "/")
	share_id := s[len(s)-1]

	req_json := ReqJson{
		Share_id: share_id,
	}
	var jsonStr, err = json.Marshal(req_json)
	if err != nil {
		fmt.Println(err)
		return record, err
	}
	req, err := http.NewRequest("POST", api_url, bytes.NewBuffer(jsonStr))

	if err != nil {
		fmt.Println(err)

	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1 Safari/605.1.15")
	client := &http.Client{}

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return record, err
	}
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return record, err

	}
	// fmt.Println(body)

	err = json.Unmarshal(body, &response)
	if err != nil {
		fmt.Println(err)
		return record, err
	}
	// fmt.Println(response.ShareName, response.Expiration)
	record.ShareName = response.ShareName
	record.Expiration = response.Expiration
	record.Url = share_url

	return record, nil
}

func main() {
	redis := godis.NewRedis(&godis.Option{
		Host: "localhost",
		Port: 6379,
		Db:   1,
	})
	defer redis.Close()
	c := colly.NewCollector(
		colly.MaxDepth(2),
		colly.AllowedDomains("pan.yuankongjian.com"),
		colly.UserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_16_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"),
		// 设置 异步网络操作
		// colly.Async(),
	)
	err := c.Limit(&colly.LimitRule{
		DomainGlob:  "*",
		Parallelism: 5,
		RandomDelay: 5 * time.Second,
	})
	if err != nil {
		return
	}
	q, _ := queue.New(
		4,
		&queue.InMemoryQueueStorage{MaxSize: 10000},
	)
	c.OnResponse(func(r *colly.Response) {
		// fmt.Println(string(r.Body))
		res := &AutoGenerated{}
		err := json.Unmarshal(r.Body, &res)
		if err != nil {
			return
		}
		postMap := make(map[string]Record)
		for _, v := range res.Data {
			if v.Type == "discussions" {
				postInfo := Record{}
				postTitle := v.Attributes.Title
				postId := v.Relationships.FirstPost.Data.ID
				postType := v.Relationships.Tags.Data[0].ID
				postInfo.Title = postTitle
				postInfo.Tag = postType
				postMap[postId] = postInfo
			}
		}
		for _, v := range res.Included {
			// fmt.Println(i, v)
			if v.Type == "posts" {
				postId := v.ID
				urls := findAlishare(v.Attributes.ContentHTML)
				for _, url := range urls {

					s := strings.Split(url, "/")
					if len(s) <= 3 {
						continue
					}
					shareCode := s[len(s)-1]
					if s[len(s)-3] == "www.aliyundrive.com" {
						record, err := getShareinfo(url)
						if err != nil {
							return
						}
						rec := make(map[string]string)
						rec["share_tile"] = postMap[postId].Title
						rec["share_tag"] = tagMap[postMap[postId].Tag]
						rec["url"] = record.Url
						rec["expiration"] = record.Expiration
						rec["share_name"] = record.ShareName
						rec["share_content"] = v.Attributes.ContentHTML
						_, err = redis.HMSet(fmt.Sprintf("panxiaozhan:%s", shareCode), rec)
						if err != nil {
							fmt.Println(err)
							return
						}
						fmt.Printf("添加记录成功：%s\n", record.Url)
					}
				}
			}
		}
		next_link := res.Links.Next
		// fmt.Println(next_link)
		err = q.AddURL(next_link)
		if err != nil {
			return
		}

	})

	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Visiting", r.URL)
	})

	err = c.Visit("https://pan.yuankongjian.com/api/discussions?include=user%2ClastPostedUser%2Ctags%2Ctags.parent%2CfirstPost&sort&page%5Boffset%5D=0")
	if err != nil {
		return
	}

	err = q.Run(c)
	if err != nil {
		return
	}
	fmt.Println("启动成功，”CTRL+C 退出")
	// c.Wait()
}
